//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace ReSharperPlugin.Verify
{
  
  
  /// <summary>
  /// <p>Generated from: VerifyModel.kt:10</p>
  /// </summary>
  public class VerifyModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public ISignal<CompareData> Compare => _Compare;
    
    //private fields
    [NotNull] private readonly RdSignal<CompareData> _Compare;
    
    //primary constructor
    private VerifyModel(
      [NotNull] RdSignal<CompareData> compare
    )
    {
      if (compare == null) throw new ArgumentNullException("compare");
      
      _Compare = compare;
      BindableChildren.Add(new KeyValuePair<string, object>("compare", _Compare));
    }
    //secondary constructor
    internal VerifyModel (
    ) : this (
      new RdSignal<CompareData>(CompareData.Read, CompareData.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => -8460501441895752832L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("VerifyModel (");
      using (printer.IndentCookie()) {
        printer.Print("compare = "); _Compare.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionVerifyModelEx
   {
    public static VerifyModel GetVerifyModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("verifyModel", () => new VerifyModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: VerifyModel.kt:15</p>
  /// </summary>
  public sealed class CompareData : IPrintable, IEquatable<CompareData>
  {
    //fields
    //public fields
    [NotNull] public string TestName {get; private set;}
    [NotNull] public string ReceivedFile {get; private set;}
    [NotNull] public string VerifiedFile {get; private set;}
    
    //private fields
    //primary constructor
    public CompareData(
      [NotNull] string testName,
      [NotNull] string receivedFile,
      [NotNull] string verifiedFile
    )
    {
      if (testName == null) throw new ArgumentNullException("testName");
      if (receivedFile == null) throw new ArgumentNullException("receivedFile");
      if (verifiedFile == null) throw new ArgumentNullException("verifiedFile");
      
      TestName = testName;
      ReceivedFile = receivedFile;
      VerifiedFile = verifiedFile;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string testName, [NotNull] out string receivedFile, [NotNull] out string verifiedFile)
    {
      testName = TestName;
      receivedFile = ReceivedFile;
      verifiedFile = VerifiedFile;
    }
    //statics
    
    public static CtxReadDelegate<CompareData> Read = (ctx, reader) => 
    {
      var testName = reader.ReadString();
      var receivedFile = reader.ReadString();
      var verifiedFile = reader.ReadString();
      var _result = new CompareData(testName, receivedFile, verifiedFile);
      return _result;
    };
    
    public static CtxWriteDelegate<CompareData> Write = (ctx, writer, value) => 
    {
      writer.Write(value.TestName);
      writer.Write(value.ReceivedFile);
      writer.Write(value.VerifiedFile);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CompareData) obj);
    }
    public bool Equals(CompareData other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TestName == other.TestName && ReceivedFile == other.ReceivedFile && VerifiedFile == other.VerifiedFile;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + TestName.GetHashCode();
        hash = hash * 31 + ReceivedFile.GetHashCode();
        hash = hash * 31 + VerifiedFile.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CompareData (");
      using (printer.IndentCookie()) {
        printer.Print("testName = "); TestName.PrintEx(printer); printer.Println();
        printer.Print("receivedFile = "); ReceivedFile.PrintEx(printer); printer.Println();
        printer.Print("verifiedFile = "); VerifiedFile.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
